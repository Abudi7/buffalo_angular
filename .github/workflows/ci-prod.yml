name: CI/CD - Production Branch

on:
  push:
    branches: [ prod ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.21'

jobs:
  # Production Build
  build-production:
    name: Production Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: timetrac-frontend/package-lock.json
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install frontend dependencies
        working-directory: ./timetrac-frontend
        run: npm ci
        
      - name: Run frontend tests
        working-directory: ./timetrac-frontend
        run: npm run test -- --watch=false --browsers=ChromeHeadless
        
      - name: Build frontend for production
        working-directory: ./timetrac-frontend
        run: npm run build -- --configuration=production
        
      - name: Build backend for production
        working-directory: ./backend
        run: go build -ldflags="-s -w" -o timetrac-backend ./cmd/app
        
      - name: Run backend tests
        working-directory: ./backend
        run: go test ./... -v
        
      - name: Create production artifacts
        run: |
          mkdir -p production-build
          cp -r timetrac-frontend/www production-build/frontend
          cp backend/timetrac-backend production-build/backend
          cp backend/database.yml production-build/
          cp docker-compose.yml production-build/
          
      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ github.sha }}
          path: production-build/
          retention-days: 90

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          
      - name: Run npm audit
        working-directory: ./timetrac-frontend
        run: npm audit --audit-level=moderate || true
        
      - name: Run go mod audit
        working-directory: ./backend
        run: go list -json -m all | nancy sleuth || true

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production, security-scan]
    if: github.ref == 'refs/heads/prod'
    
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download production artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ github.sha }}
          path: production-build/
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Examples:
          # - Docker deployment
          # - Cloud provider deployment (AWS, GCP, Azure)
          # - Server deployment via SSH/SCP
          
      - name: Health check
        run: |
          echo "Running health checks..."
          # Add health check commands here
          # curl -f https://your-production-url.com/health || exit 1
          
      - name: Notify deployment success
        run: |
          echo "Production deployment successful!"
          # Add notification logic here (Slack, email, etc.)

  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/prod'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog..."
          # Add changelog generation logic here
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.changelog }}
            
            ## Deployment
            - Frontend: Deployed to production
            - Backend: Deployed to production
            - Database: Migrations applied
            
            ## Verification
            - All tests passed
            - Security scan completed
            - Health checks passed
          draft: false
          prerelease: false
